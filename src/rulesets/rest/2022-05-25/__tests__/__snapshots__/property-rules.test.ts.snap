// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`body properties breaking changes fails if a property is removed 1`] = `
[
  {
    "change": {
      "changeType": "removed",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/count",
        "kind": "field",
      },
      "removed": {
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "count",
          "required": false,
        },
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Expected property count to not be removed",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property removal",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "removed",
    "where": "GET /example response 200 response body: application/json property count",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties breaking changes fails if a required property is added 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property casing",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "cannot add a required request property to an existing operation",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property enum or example",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#timestamp-properties",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example request body: application/json",
  },
]
`;

exports[`body properties breaking changes passes if a property is removed in experimental 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties breaking changes passes if a required property is added in experimental 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property casing",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property enum or example",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#timestamp-properties",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "number",
        },
        "key": "count",
        "required": true,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "count",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
          "count",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json/schema/properties/count",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example request body: application/json property: count",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example request body: application/json",
  },
]
`;

exports[`body properties breaking changes passes if spec is removed 1`] = `[]`;

exports[`body properties enum value changes fails if an enum value is changed in a request property 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValC",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_enum_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Cannot remove or change enum value 'ValA' from request property 'test_enum_prop'. This is a breaking change.",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request enum value removal",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property type to enum",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
]
`;

exports[`body properties enum value changes fails if an enum value is changed in a response property 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValC",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_enum_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Cannot remove or change enum value 'ValA' from response property 'test_enum_prop'. This is a breaking change.",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response enum value removal",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValC",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property type to enum",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
]
`;

exports[`body properties enum value changes fails if an enum value is removed from a request property 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_enum_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Cannot remove or change enum value 'ValA' from request property 'test_enum_prop'. This is a breaking change.",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request enum value removal",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property type to enum",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
]
`;

exports[`body properties enum value changes fails if an enum value is removed from a response property 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_enum_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Cannot remove or change enum value 'ValA' from response property 'test_enum_prop'. This is a breaking change.",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response enum value removal",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property type to enum",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
]
`;

exports[`body properties enum value changes passes if a non-enum property is changed 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "default": "abc",
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_string_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_string_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_string_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_string_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_string_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_string_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_string_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "default": "abc",
          "type": "string",
        },
        "key": "test_string_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_string_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "default": "abc",
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_string_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_string_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_string_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_string_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "default": "abc",
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_string_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_string_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_string_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_string_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "default": "abc",
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_string_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_string_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_string_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_string_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "default": "abc",
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_string_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_string_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_string_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_string_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "default": "abc",
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_string_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_string_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_string_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_string_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "default": "abc",
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_string_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_string_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_string_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_string_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property type to enum",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_string_prop",
  },
]
`;

exports[`body properties enum value changes passes if an enum value is added to a request property 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_enum_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property type to enum",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
]
`;

exports[`body properties enum value changes passes if an enum value is added to a response property 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_enum_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "enum": [
              "ValA",
            ],
            "type": "string",
          },
          "key": "test_enum_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property type to enum",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_enum_prop",
  },
]
`;

exports[`body properties enum value changes passes if enum values are not changed 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_enum_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_enum_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_enum_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_enum_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_enum_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
]
`;

exports[`body properties key allows non-snake case if already in spec 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "snake_case",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property snake_case",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
            "notSNAKEcase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
          "notSNAKEcase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case/properties/notSNAKEcase",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "notSNAKEcase",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property snake_case/notSNAKEcase",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties key fails when not snake case 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "not-snake-case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "not-snake-case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "not-snake-case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/not-snake-case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "expected not-snake-case to be snake case",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property not-snake-case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "not-snake-case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "not-snake-case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "not-snake-case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/not-snake-case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property not-snake-case",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "not-snake-case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "not-snake-case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/not-snake-case",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "not-snake-case",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property not-snake-case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "not-snake-case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "not-snake-case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "not-snake-case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/not-snake-case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property not-snake-case",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties key fails when not snake case in experimental 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "not-snake-case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "not-snake-case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "not-snake-case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/not-snake-case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "expected not-snake-case to be snake case",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property not-snake-case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "not-snake-case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "not-snake-case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "not-snake-case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/not-snake-case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property not-snake-case",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "not-snake-case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "not-snake-case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/not-snake-case",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "not-snake-case",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property not-snake-case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "not-snake-case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "not-snake-case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "not-snake-case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/not-snake-case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property not-snake-case",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties key fails when not snake case in nested field 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "object",
        },
        "key": "snake_case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property snake_case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "notSNAKEcase",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
            "notSNAKEcase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
          "notSNAKEcase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case/properties/notSNAKEcase",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "expected notSNAKEcase to be snake case",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property snake_case/notSNAKEcase",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "object",
        },
        "key": "snake_case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property snake_case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "notSNAKEcase",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
            "notSNAKEcase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
          "notSNAKEcase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case/properties/notSNAKEcase",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property snake_case/notSNAKEcase",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "snake_case",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property snake_case",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
            "notSNAKEcase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
          "notSNAKEcase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case/properties/notSNAKEcase",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "notSNAKEcase",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property snake_case/notSNAKEcase",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "object",
        },
        "key": "snake_case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property snake_case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "notSNAKEcase",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "snake_case",
            "notSNAKEcase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "snake_case",
          "notSNAKEcase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/snake_case/properties/notSNAKEcase",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property snake_case/notSNAKEcase",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties key fails when number in n=1 snake case component 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "30_days",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "30_days",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "30_days",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/30_days",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": "expected 30_days to be snake case",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property 30_days",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "30_days",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "30_days",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "30_days",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/30_days",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property 30_days",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "30_days",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "30_days",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/30_days",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "30_days",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property 30_days",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "30_days",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "30_days",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "30_days",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/30_days",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property 30_days",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties key passes when snake case with a number as an n+1 component 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "is_allowed_after_30_days",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "is_allowed_after_30_days",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "is_allowed_after_30_days",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/is_allowed_after_30_days",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property is_allowed_after_30_days",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "is_allowed_after_30_days",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "is_allowed_after_30_days",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "is_allowed_after_30_days",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/is_allowed_after_30_days",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property is_allowed_after_30_days",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "is_allowed_after_30_days",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "is_allowed_after_30_days",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/is_allowed_after_30_days",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "is_allowed_after_30_days",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property is_allowed_after_30_days",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "is_allowed_after_30_days",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "is_allowed_after_30_days",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "is_allowed_after_30_days",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/is_allowed_after_30_days",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property is_allowed_after_30_days",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties key passes when snake case with more than one component 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "is_snake_case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "is_snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "is_snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/is_snake_case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property is_snake_case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "is_snake_case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "is_snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "is_snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/is_snake_case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property is_snake_case",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "is_snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "is_snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/is_snake_case",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "is_snake_case",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property is_snake_case",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "is_snake_case",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "is_snake_case",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "is_snake_case",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/is_snake_case",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property is_snake_case",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties key passes when snake case with one component 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "technicallysnakecase",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "technicallysnakecase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "technicallysnakecase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/technicallysnakecase",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property technicallysnakecase",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "technicallysnakecase",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "technicallysnakecase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "technicallysnakecase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/technicallysnakecase",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property technicallysnakecase",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "technicallysnakecase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "technicallysnakecase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/technicallysnakecase",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "technicallysnakecase",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property technicallysnakecase",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "type": "string",
        },
        "key": "technicallysnakecase",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "technicallysnakecase",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "technicallysnakecase",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/technicallysnakecase",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property technicallysnakecase",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties string to enum changes fails if a request property changes from boolean to boolean+enum 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              true,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            true,
          ],
          "type": "boolean",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              true,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              true,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              true,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              true,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              true,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              true,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Changing property 'test_prop' from a type without an enum to a type with an enum (new type: boolean) is a breaking change.",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property type to enum",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
]
`;

exports[`body properties string to enum changes fails if a request property changes from integer to integer+enum 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            1,
            2,
          ],
          "type": "integer",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Changing property 'test_prop' from a type without an enum to a type with an enum (new type: integer) is a breaking change.",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property type to enum",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
]
`;

exports[`body properties string to enum changes fails if a request property changes from number to number+enum 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            1.1,
            2.2,
          ],
          "type": "number",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Changing property 'test_prop' from a type without an enum to a type with an enum (new type: number) is a breaking change.",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property type to enum",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
]
`;

exports[`body properties string to enum changes fails if a request property changes from string to string+enum 1`] = `
[
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Changing property 'test_prop' from a type without an enum to a type with an enum (new type: string) is a breaking change.",
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property type to enum",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
]
`;

exports[`body properties string to enum changes fails if a response property changes from boolean to boolean+enum 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            false,
          ],
          "type": "boolean",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              false,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              false,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              false,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              false,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              false,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              false,
            ],
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "boolean",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Changing property 'test_prop' from a type without an enum to a type with an enum (new type: boolean) is a breaking change.",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property type to enum",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
]
`;

exports[`body properties string to enum changes fails if a response property changes from integer to integer+enum 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            1,
            2,
          ],
          "type": "integer",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Changing property 'test_prop' from a type without an enum to a type with an enum (new type: integer) is a breaking change.",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property type to enum",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
]
`;

exports[`body properties string to enum changes fails if a response property changes from number to number+enum 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            1.1,
            2.2,
          ],
          "type": "number",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1.1,
              2.2,
            ],
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "number",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Changing property 'test_prop' from a type without an enum to a type with an enum (new type: number) is a breaking change.",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property type to enum",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
]
`;

exports[`body properties string to enum changes fails if a response property changes from string to string+enum 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing format in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing pattern in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent changing type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response enum value removal",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": "Changing property 'test_prop' from a type without an enum to a type with an enum (new type: string) is a breaking change.",
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property type to enum",
    "passed": false,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
]
`;

exports[`body properties string to enum changes passes if integer to integer+enum in request is experimental 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            1,
            2,
          ],
          "type": "integer",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              1,
              2,
            ],
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "integer",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
]
`;

exports[`body properties string to enum changes passes if request property added as string+enum 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property casing",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/principles/version.md#breaking-changes",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "prevent adding a required request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property enum or example",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#timestamp-properties",
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
]
`;

exports[`body properties string to enum changes passes if request property string to string (no enum) 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
]
`;

exports[`body properties string to enum changes passes if response property added as string+enum 1`] = `
[
  {
    "change": {
      "added": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property casing",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards/rest.md#formats",
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response property date formatting",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "added": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
      "changeType": "added",
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "added",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties string to enum changes passes if response property string to string (no enum) 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;

exports[`body properties string to enum changes passes if string to string+enum in request is experimental 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in request property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "POST /example request body: application/json property: data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inRequest": {
            "body": {
              "contentType": "application/json",
            },
          },
          "method": "post",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "post",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/post/requestBody/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "request schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "POST /example request body: application/json",
  },
]
`;

exports[`body properties string to enum changes passes if string to string+enum in response is experimental 1`] = `
[
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "data",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "type": "object",
        },
        "key": "attributes",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
      "value": {
        "flatSchema": {
          "enum": [
            "ValA",
            "ValB",
          ],
          "type": "string",
        },
        "key": "test_prop",
        "required": false,
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response array with items",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "changeType": "changed",
      "changed": {
        "after": {
          "flatSchema": {
            "enum": [
              "ValA",
              "ValB",
            ],
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
        "before": {
          "flatSchema": {
            "type": "string",
          },
          "key": "test_prop",
          "required": false,
        },
      },
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "jsonSchemaTrail": [
            "data",
            "attributes",
            "test_prop",
          ],
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
          "data",
          "attributes",
          "test_prop",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/data/properties/attributes/properties/test_prop",
        "kind": "field",
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "valid collection type in response property",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "changed",
    "where": "GET /example response 200 response body: application/json property data/attributes/test_prop",
  },
  {
    "change": {
      "location": {
        "conceptualLocation": {
          "inResponse": {
            "body": {
              "contentType": "application/json",
            },
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
          "application/json",
        ],
        "jsonPath": "/paths/~1example/get/responses/200/content/application~1json",
        "kind": "body",
      },
      "value": {
        "contentType": "application/json",
        "flatSchema": {
          "type": "object",
        },
      },
    },
    "condition": undefined,
    "docsLink": undefined,
    "error": undefined,
    "exempted": false,
    "expected": undefined,
    "isMust": true,
    "isShould": false,
    "name": "response schema properties",
    "passed": true,
    "received": undefined,
    "severity": 2,
    "type": "requirement",
    "where": "GET /example response 200 response body: application/json",
  },
]
`;
