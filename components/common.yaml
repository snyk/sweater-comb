schemas:

  JsonApi:
    type: object
    properties:
      version:
        type: string
        pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)$'
        description: Version of the JSON API specification this server supports.
        example: "1.0"
    required: ["version"]
    additionalProperties: false
    example:
      version: "1.0"

  Links:
    type: object
    properties:
      self: { $ref: "#/schemas/LinkProperty" }
      related: { $ref: "#/schemas/LinkProperty" }
      first: { $ref: "#/schemas/LinkProperty" }
      last: { $ref: "#/schemas/LinkProperty" }
      prev: { $ref: "#/schemas/LinkProperty" }
      next: { $ref: "#/schemas/LinkProperty" }
    additionalProperties: false

  SelfLink:
    type: object
    properties:
      self: { $ref: "#/schemas/LinkProperty" }
    additionalProperties: false
    example:
      self: "https://example.com/api/this_resource"

  RelatedLink:
    type: object
    properties:
      related: { $ref: "#/schemas/LinkProperty" }
    additionalProperties: false
    example:
      related: "https://example.com/api/other_resource"

  ErrorLink:
    type: object
    description: A link that leads to further details about this particular occurrance of the problem.
    properties:
      about: { $ref: "#/schemas/LinkProperty" }
    additionalProperties: false
    example:
      about: "https://example.com/about_this_error"

  PaginatedLinks:
    type: object
    properties:
      first: { $ref: "#/schemas/LinkProperty" }
      last: { $ref: "#/schemas/LinkProperty" }
      prev: { $ref: "#/schemas/LinkProperty" }
      next: { $ref: "#/schemas/LinkProperty" }
      self: { $ref: "#/schemas/LinkProperty" }
    additionalProperties: false
    example:
      first: "https://example.com/api/resource?ending_before=v1.eyJpZCI6IjExIn0K"
      last: "https://example.com/api/resource?starting_after=v1.eyJpZCI6IjMwIn0K"
      next: "https://example.com/api/resource?starting_after=v1.eyJpZCI6IjEwIn0K"

  LinkProperty:
    oneOf:
      - type: string
        description: A string containing the link’s URL.
        example: "https://example.com/api/resource"
      - type: object
        properties:
          href:
            type: string
            description: A string containing the link’s URL.
            example: "https://example.com/api/resource"
          meta: { $ref: "#/schemas/Meta" }
        required: ["href"]
        additionalProperties: false
        example:
          href: "https://example.com/api/resource"
    example: "https://example.com/api/resource"

  Meta:
    type: object
    description: Free-form object that may contain non-standard information.
    example:
      key1: value1
      key2:
        sub_key: sub_value
      key3: [array_value1, array_value2]
    additionalProperties: true
    properties: {}

  Relationship:
    type: object
    properties:
      data:
        type: object
        properties:
          type:
            type: string
            pattern: "^[a-z][a-z0-9]*(_[a-z][a-z0-9]*)*$"
            description: Type of the related resource
            example: resource
          id:
            type: string
            format: uuid
            example: 4a72d1db-b465-4764-99e1-ecedad03b06a
        required: ["type", "id"]
        additionalProperties: false
      links: { $ref: "#/schemas/RelatedLink" }
      meta: { $ref: "#/schemas/Meta" }
    required: [data, links]
    example:
      data:
        type: resource
        id: 4a72d1db-b465-4764-99e1-ecedad03b06a
      links:
        related:
          href: https://example.com/api/resource/4a72d1db-b465-4764-99e1-ecedad03b06a

  ErrorDocument:
    type: object
    properties:
      jsonapi: { $ref: "#/schemas/JsonApi" }
      errors:
        type: array
        items: { $ref: "#/schemas/Error" }
        minItems: 1
        example:
          - status: "403"
            detail: Permission denied for this resource
    additionalProperties: false
    required: ["jsonapi", "errors"]
    example:
      jsonapi:
        version: "1.0"
      errors:
        - status: "403"
          detail: Permission denied for this resource

  Error:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: "A unique identifier for this particular occurrence of the problem."
        example: f16c31b5-6129-4571-add8-d589da9be524
      links: { $ref: "#/schemas/ErrorLink" }
      status:
        type: string
        pattern: '^[45]\d\d$'
        description: "The HTTP status code applicable to this problem, expressed as a string value."
        example: "400"
      detail:
        type: string
        description: "A human-readable explanation specific to this occurrence of the problem."
        example: "The request was missing these required fields: ..."
      code:
        type: string
        description: "An application-specific error code, expressed as a string value."
        example: "entity-not-found"
      title:
        type: string
        description: "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization."
        example: "Bad request"
      source:
        type: object
        properties:
          pointer:
            type: string
            description: "A JSON Pointer [RFC6901] to the associated entity in the request document."
            example: /data/attributes
          parameter:
            type: string
            description: "A string indicating which URI query parameter caused the error."
            example: "param1"
        additionalProperties: false
        example:
          pointer: /data/attributes
      meta:
        type: object
        additionalProperties: true
        example:
          key: value
        properties: {}
    required: ["status", "detail"]
    additionalProperties: false
    example:
      status: "404"
      detail: "Not Found"

  Tag:
    type: object
    properties:
      key:
        type: string
        example: key
      value:
        type: string
        example: value
    required: [key, value]
    additionalProperties: false

  Types:
    type: string
    pattern: "^[a-z][a-z0-9]*(_[a-z][a-z0-9]*)*$"
    example: resource
    # TODO: enum, generated from all known resources

  QueryVersion:
    type: "string"
    description: "Requested API version"
    pattern: "^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$"

  ActualVersion:
    type: string
    description: Resolved API version
    pattern: "^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$"

headers:

  VersionRequestedResponseHeader:
    description: The version of the endpoint requested by the caller.
    schema: { $ref: "#/schemas/QueryVersion" }
    example: "2021-06-04"

  VersionServedResponseHeader:
    description: The version of the endpoint that was served by the API.
    schema: { $ref: "#/schemas/ActualVersion" }
    example: "2021-06-04"

  VersionStageResponseHeader:
    description: >
      The version stage of the endpoint. This stage describes the guarantees
      Snyk provides surrounding stability of the endpoint.
    schema:
      type: string
      enum:
        - wip
        - experimental
        - beta
        - ga
        - deprecated
        - sunset
      example: "ga"

  DeprecationHeader:
    description: >
      The deprecation date of the underlying endpoint. For more information,
      please refer to the deprecation header RFC:

      https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
    schema:
      type: string
      format: date-time
    example: "2021-07-01T00:00:00Z"

  SunsetHeader:
    description: >
      The date of when the underlying endpoint will be removed. This header is
      only present if the endpoint has been deprecated.  Please refer to the
      RFC for more information:

      https://datatracker.ietf.org/doc/html/rfc8594
    schema:
      type: string
      format: date-time
    example: "2021-08-02T00:00:00Z"

  RequestIdResponseHeader:
    description: >
      A unique id used for tracking this request. If you are reporting an
      issue to Snyk it's very helpful to provide this ID.
    schema:
      type: string
      format: uuid
    example: 4b58e274-ec62-4fab-917b-1d2c48d6bdef

  InternalGlooNormalizedPathHeader:
    x-snyk-internal: true
    description: >
      An internal header used by Snyk's API-Gateway for analytics.
    schema:
      type: string

  InternalGlooOrgIdHeader:
    x-snyk-internal: true
    description: >
      An internal header used by Snyk's API-Gateway for analytics.
    schema:
      type: string
      format: uuid

  LocationHeader:
    description: >
      A header providing a URL for the location of a resource
    schema:
      type: string
      format: url
    example: https://example.com/resource/4

parameters:

  StartingAfter:
    name: starting_after
    in: query
    description: Return the page of results immediately after this cursor
    example: "v1.eyJpZCI6IjEwMDAifQo="
    schema:
      type: string
  EndingBefore:
    name: ending_before
    in: query
    description: Return the page of results immediately before this cursor
    example: "v1.eyJpZCI6IjExMDAifQo="
    schema:
      type: string

  Limit:
    name: limit
    in: query
    description: Number of results to return per page
    example: 10
    schema:
      type: integer
      minimum: 1
      maximum: 100
      default: 10
      format: int32

  Version:
    name: version
    in: query
    required: true
    description: The requested version of the endpoint to process the request
    example: "2021-06-04"
    schema: { $ref: "#/schemas/QueryVersion" }

  MetaCount:
    name: meta_count
    in: query
    description: State the number of objects in a collection
    example: only
    schema:
      type: string
      enum:
        - only
        - with

responses:

  '204':
    description: 'The operation completed successfully with no content'
    headers:
      snyk-version-requested: { $ref: '#/headers/VersionRequestedResponseHeader' }
      snyk-version-served: { $ref: '#/headers/VersionServedResponseHeader' }
      snyk-request-id: { $ref: '#/headers/RequestIdResponseHeader' }
      snyk-version-lifecycle-stage: { $ref: '#/headers/VersionStageResponseHeader' }
      deprecation: { $ref: '#/headers/DeprecationHeader' }
      sunset: { $ref: '#/headers/SunsetHeader' }
  
  '400':
    description: 'Bad Request: A parameter provided as a part of the request was invalid.'
    headers:
      snyk-version-requested: { $ref: '#/headers/VersionRequestedResponseHeader' }
      snyk-version-served: { $ref: '#/headers/VersionServedResponseHeader' }
      snyk-request-id: { $ref: '#/headers/RequestIdResponseHeader' }
      snyk-version-lifecycle-stage: { $ref: '#/headers/VersionStageResponseHeader' }
      deprecation: { $ref: '#/headers/DeprecationHeader' }
      sunset: { $ref: '#/headers/SunsetHeader' }
    content:
      application/vnd.api+json:
        schema: { $ref: '#/schemas/ErrorDocument' }
  
  '401':
    description: 'Unauthorized: the request requires an authentication token.'
    headers:
      snyk-version-requested: { $ref: '#/headers/VersionRequestedResponseHeader' }
      snyk-version-served: { $ref: '#/headers/VersionServedResponseHeader' }
      snyk-request-id: { $ref: '#/headers/RequestIdResponseHeader' }
      snyk-version-lifecycle-stage: { $ref: '#/headers/VersionStageResponseHeader' }
      deprecation: { $ref: '#/headers/DeprecationHeader' }
      sunset: { $ref: '#/headers/SunsetHeader' }
    content:
      application/vnd.api+json:
        schema: { $ref: '#/schemas/ErrorDocument' }
  
  '403':
    description: 'Forbidden: the request requires an authentication token with more or different permissions.'
    headers:
      snyk-version-requested: { $ref: '#/headers/VersionRequestedResponseHeader' }
      snyk-version-served: { $ref: '#/headers/VersionServedResponseHeader' }
      snyk-request-id: { $ref: '#/headers/RequestIdResponseHeader' }
      snyk-version-lifecycle-stage: { $ref: '#/headers/VersionStageResponseHeader' }
      deprecation: { $ref: '#/headers/DeprecationHeader' }
      sunset: { $ref: '#/headers/SunsetHeader' }
    content:
      application/vnd.api+json:
        schema: { $ref: '#/schemas/ErrorDocument' }
  
  '404':
    description: 'Not Found: The resource being operated on could not be found.'
    headers:
      snyk-version-requested: { $ref: '#/headers/VersionRequestedResponseHeader' }
      snyk-version-served: { $ref: '#/headers/VersionServedResponseHeader' }
      snyk-request-id: { $ref: '#/headers/RequestIdResponseHeader' }
      snyk-version-lifecycle-stage: { $ref: '#/headers/VersionStageResponseHeader' }
      deprecation: { $ref: '#/headers/DeprecationHeader' }
      sunset: { $ref: '#/headers/SunsetHeader' }
    content:
      application/vnd.api+json:
        schema: { $ref: '#/schemas/ErrorDocument' }
  
  '409':
    description: 'Conflict: The requested operation conflicts with the current state of the resource in some way.'
    headers:
      snyk-version-requested: { $ref: '#/headers/VersionRequestedResponseHeader' }
      snyk-version-served: { $ref: '#/headers/VersionServedResponseHeader' }
      snyk-request-id: { $ref: '#/headers/RequestIdResponseHeader' }
      snyk-version-lifecycle-stage: { $ref: '#/headers/VersionStageResponseHeader' }
      deprecation: { $ref: '#/headers/DeprecationHeader' }
      sunset: { $ref: '#/headers/SunsetHeader' }
    content:
      application/vnd.api+json:
        schema: { $ref: '#/schemas/ErrorDocument' }
  
  '500':
    description: 'Internal Server Error: An error was encountered while attempting to process the request.'
    headers:
      snyk-version-requested: { $ref: '#/headers/VersionRequestedResponseHeader' }
      snyk-version-served: { $ref: '#/headers/VersionServedResponseHeader' }
      snyk-request-id: { $ref: '#/headers/RequestIdResponseHeader' }
      snyk-version-lifecycle-stage: { $ref: '#/headers/VersionStageResponseHeader' }
      deprecation: { $ref: '#/headers/DeprecationHeader' }
      sunset: { $ref: '#/headers/SunsetHeader' }
    content:
      application/vnd.api+json:
        schema: { $ref: '#/schemas/ErrorDocument' }
  
